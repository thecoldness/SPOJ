#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
using namespace std;

namespace thecold
{
	const int Max_n = 2e5 + 5e4 + 5;

	int son[Max_n << 1][27] , link[Max_n << 1] , len[Max_n << 1];
	int lst = 1 , tot = 1 , ans;

	char c[Max_n];

	inline void insert(const int ch)
	{
		int p = lst , newpos = ++ tot; len[newpos] = len[p] + 1;
		lst = newpos;
		while(p && !son[p][ch]) son[p][ch] = newpos , p = link[p];
		if(!p) return link[newpos] = 1 , void();
		int q = son[p][ch];
		if(len[q] == len[p] + 1) return link[newpos] = q , void();
		int clone = ++ tot; len[clone] = len[p] + 1;
		link[clone] = link[q] , link[q] = link[newpos] = clone;
		memcpy(son[clone] , son[q] , sizeof(son[q]));
		while(p && son[p][ch] == q) son[p][ch] = clone , p = link[p];
	}

	inline void main()
	{
		scanf("%s" , c + 1); int lenth = strlen(c + 1);
		for(int i = 1 ; i <= lenth ; ++ i)
			insert(c[i] - 'a') , c[i] = 0;
		scanf("%s" , c + 1); lenth = strlen(c + 1);
		int now = 1 , tmp = 0;
		for(int i = 1 ; i <= lenth ; ++ i)
		{
			int ch = c[i] - 'a';
			while(now && !son[now][ch]) now = link[now] , tmp = len[now];
			if(now == 0) now = 1;
			if(son[now][ch]) ans = max(ans , ++ tmp) , now = son[now][ch];
		}
		printf("%d\n" , ans);
	}
}

int main()
{
	thecold::main();
	return 0;
}
